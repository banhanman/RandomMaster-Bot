import random
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import config
from datetime import datetime, timedelta
import json
import os
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=config.TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class RandomStates(StatesGroup):
    waiting_for_number_range = State()
    waiting_for_list = State()
    waiting_for_names = State()
    waiting_for_teams = State()
    waiting_for_weights = State()
    waiting_for_date_range = State()
    waiting_for_password_length = State()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_history = {}

def save_user_data(user_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª"""
    if user_id not in user_history:
        return
    
    filename = f"user_data/{user_id}.json"
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(user_history[user_id], f, ensure_ascii=False, indent=2)

def load_user_data(user_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞"""
    filename = f"user_data/{user_id}.json"
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    return []

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_history:
        user_history[user_id] = load_user_data(user_id) or []
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ", callback_data="random_number"),
        InlineKeyboardButton("üìã –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä", callback_data="random_choice"),
        InlineKeyboardButton("üë• –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã", callback_data="team_chooser"),
        InlineKeyboardButton("üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—è", callback_data="password_generator"),
        InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="shuffle_list"),
        InlineKeyboardButton("üìÖ –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞", callback_data="random_date"),
        InlineKeyboardButton("‚öñÔ∏è –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä", callback_data="weighted_choice"),
        InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history"),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_info")
    ]
    keyboard.add(*buttons)
    
    await message.answer(
        "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RandomMaster Bot!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–¥–µ–ª–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏:\n"
        "‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞\n"
        "‚Ä¢ –í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "‚Ä¢ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π\n"
        "‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã\n"
        "‚Ä¢ –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'random_number')
async def random_number_handler(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>–æ—Ç –¥–æ</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>1 100</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>-10 10</code>",
        parse_mode="HTML"
    )
    await RandomStates.waiting_for_number_range.set()

@dp.message_handler(state=RandomStates.waiting_for_number_range)
async def process_number_range(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    
    try:
        parts = text.split()
        if len(parts) != 2:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        min_val = int(parts[0])
        max_val = int(parts[1])
        
        if min_val >= max_val:
            raise ValueError("–ú–∏–Ω–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞")
        
        result = random.randint(min_val, max_val)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_entry = {
            "type": "number",
            "input": f"{min_val}-{max_val}",
            "result": result,
            "timestamp": datetime.now().isoformat()
        }
        user_history[user_id].append(history_entry)
        save_user_data(user_id)
        
        await message.answer(f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: <b>{result}</b>", parse_mode="HTML")
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–æ—Ç –¥–æ</code>", parse_mode="HTML")
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'random_choice')
async def random_choice_handler(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏:\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–Ø–±–ª–æ–∫–æ, –ì—Ä—É—à–∞, –ë–∞–Ω–∞–Ω, –ê–ø–µ–ª—å—Å–∏–Ω</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–ò–≤–∞–Ω, –ú–∞—Ä–∏—è, –ü—ë—Ç—Ä, –ê–Ω–Ω–∞</code>",
        parse_mode="HTML"
    )
    await RandomStates.waiting_for_list.set()

@dp.message_handler(state=RandomStates.waiting_for_list)
async def process_random_choice(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    
    if not text:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        await state.finish()
        return
    
    items = [item.strip() for item in text.split(',') if item.strip()]
    
    if len(items) < 2:
        await message.answer("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞")
        await state.finish()
        return
    
    result = random.choice(items)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    history_entry = {
        "type": "choice",
        "input": text,
        "result": result,
        "timestamp": datetime.now().isoformat()
    }
    user_history[user_id].append(history_entry)
    save_user_data(user_id)
    
    await message.answer(f"üéØ –í—ã–±—Ä–∞–Ω: <b>{result}</b>", parse_mode="HTML")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'team_chooser')
async def team_chooser_handler(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "üë• –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏:\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–ê–ª–µ–∫—Å–µ–π, –ú–∞—Ä–∏—è, –ò–≤–∞–Ω, –û–ª—å–≥–∞, –î–º–∏—Ç—Ä–∏–π, –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞</code>",
        parse_mode="HTML"
    )
    await RandomStates.waiting_for_names.set()

@dp.message_handler(state=RandomStates.waiting_for_names)
async def process_names(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    
    if not text:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        await state.finish()
        return
    
    names = [name.strip() for name in text.split(',') if name.strip()]
    
    if len(names) < 2:
        await message.answer("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞")
        await state.finish()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async with state.proxy() as data:
        data['names'] = names
    
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ (–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>2</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–ö—Ä–∞—Å–Ω—ã–µ, –°–∏–Ω–∏–µ, –ó–µ–ª–µ–Ω—ã–µ</code>",
        parse_mode="HTML"
    )
    await RandomStates.waiting_for_teams.set()

@dp.message_handler(state=RandomStates.waiting_for_teams)
async def process_teams(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    
    async with state.proxy() as data:
        names = data['names']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if text.isdigit():
        team_count = int(text)
        if team_count < 2:
            await message.answer("‚ùå –ú–∏–Ω–∏–º—É–º 2 –∫–æ–º–∞–Ω–¥—ã")
            await state.finish()
            return
        
        team_names = [f"–ö–æ–º–∞–Ω–¥–∞ {i+1}" for i in range(team_count)]
    else:
        team_names = [name.strip() for name in text.split(',') if name.strip()]
        if len(team_names) < 2:
            await message.answer("‚ùå –ú–∏–Ω–∏–º—É–º 2 –∫–æ–º–∞–Ω–¥—ã")
            await state.finish()
            return
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏–º–µ–Ω–∞
    random.shuffle(names)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    teams = {team: [] for team in team_names}
    for i, name in enumerate(names):
        team = team_names[i % len(team_names)]
        teams[team].append(name)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = "üèÜ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
    for team, members in teams.items():
        result += f"<b>{team}:</b>\n"
        result += "\n".join([f"‚Ä¢ {member}" for member in members])
        result += "\n\n"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    history_entry = {
        "type": "teams",
        "input": {"names": names, "teams": team_names},
        "result": teams,
        "timestamp": datetime.now().isoformat()
    }
    user_history[user_id].append(history_entry)
    save_user_data(user_id)
    
    await message.answer(result, parse_mode="HTML")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'password_generator')
async def password_generator_handler(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–æ—Ç 6 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    await RandomStates.waiting_for_password_length.set()

@dp.message_handler(state=RandomStates.waiting_for_password_length)
async def process_password_length(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    
    try:
        length = int(text)
        if length < 6 or length > 50:
            raise ValueError("–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 6 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
        chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()"
        password = ''.join(random.choice(chars) for _ in range(length))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_entry = {
            "type": "password",
            "input": length,
            "result": password,
            "timestamp": datetime.now().isoformat()
        }
        user_history[user_id].append(history_entry)
        save_user_data(user_id)
        
        await message.answer(f"üîë –í–∞—à –ø–∞—Ä–æ–ª—å:\n<code>{password}</code>", parse_mode="HTML")
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'shuffle_list')
async def shuffle_list_handler(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏:\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>1, 2, 3, 4, 5</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–ê, –ë, –í, –ì, –î</code>",
        parse_mode="HTML"
    )
    await RandomStates.waiting_for_list.set()

@dp.callback_query_handler(lambda c: c.data == 'random_date')
async def random_date_handler(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>–ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>2023-01-01 2023-12-31</code>",
        parse_mode="HTML"
    )
    await RandomStates.waiting_for_date_range.set()

@dp.message_handler(state=RandomStates.waiting_for_date_range)
async def process_date_range(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    
    try:
        parts = text.split()
        if len(parts) != 2:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        start_date = datetime.strptime(parts[0], "%Y-%m-%d")
        end_date = datetime.strptime(parts[1], "%Y-%m-%d")
        
        if start_date >= end_date:
            raise ValueError("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã
        time_between = end_date - start_date
        random_days = random.randrange(time_between.days)
        random_date = start_date + timedelta(days=random_days)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        formatted_date = random_date.strftime("%d.%m.%Y")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_entry = {
            "type": "date",
            "input": f"{parts[0]} - {parts[1]}",
            "result": formatted_date,
            "timestamp": datetime.now().isoformat()
        }
        user_history[user_id].append(history_entry)
        save_user_data(user_id)
        
        await message.answer(f"üìÖ –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞: <b>{formatted_date}</b>", parse_mode="HTML")
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î</code>", parse_mode="HTML")
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'weighted_choice')
async def weighted_choice_handler(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –∏—Ö –≤–µ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>–≠–ª–µ–º–µ–Ω—Ç1:–í–µ—Å1, –≠–ª–µ–º–µ–Ω—Ç2:–í–µ—Å2, ...</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–ö—Ä–∞—Å–Ω—ã–π:3, –ó–µ–ª–µ–Ω—ã–π:2, –°–∏–Ω–∏–π:1</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–Ø–±–ª–æ–∫–æ:5, –ì—Ä—É—à–∞:3, –ë–∞–Ω–∞–Ω:2</code>",
        parse_mode="HTML"
    )
    await RandomStates.waiting_for_weights.set()

@dp.message_handler(state=RandomStates.waiting_for_weights)
async def process_weighted_choice(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    
    try:
        items = []
        total_weight = 0
        
        for pair in text.split(','):
            pair = pair.strip()
            if not pair:
                continue
                
            if ':' not in pair:
                raise ValueError(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—ã: {pair}")
            
            parts = pair.split(':', 1)
            item = parts[0].strip()
            weight = float(parts[1].strip())
            
            if weight <= 0:
                raise ValueError(f"–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º: {item}")
            
            items.append((item, weight))
            total_weight += weight
        
        if len(items) < 2:
            raise ValueError("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —ç–ª–µ–º–µ–Ω—Ç–∞")
        
        # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        rand = random.uniform(0, total_weight)
        current = 0
        for item, weight in items:
            current += weight
            if rand <= current:
                result = item
                break
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_entry = {
            "type": "weighted",
            "input": text,
            "result": result,
            "timestamp": datetime.now().isoformat()
        }
        user_history[user_id].append(history_entry)
        save_user_data(user_id)
        
        await message.answer(f"‚öñÔ∏è –í—ã–±—Ä–∞–Ω: <b>{result}</b>", parse_mode="HTML")
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.", parse_mode="HTML")
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'show_history')
async def show_history_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    if user_id not in user_history or not user_history[user_id]:
        await bot.answer_callback_query(callback_query.id, "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
    recent_history = user_history[user_id][-10:]
    
    response = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
    for idx, entry in enumerate(reversed(recent_history), 1):
        dt = datetime.fromisoformat(entry['timestamp']).astimezone(pytz.timezone('Europe/Moscow'))
        timestamp = dt.strftime("%d.%m.%Y %H:%M")
        
        if entry['type'] == 'number':
            response += f"{idx}. üé≤ –ß–∏—Å–ª–æ: {entry['input']} ‚Üí <b>{entry['result']}</b> ({timestamp})\n"
        elif entry['type'] == 'choice':
            response += f"{idx}. üéØ –í—ã–±–æ—Ä: {entry['input']} ‚Üí <b>{entry['result']}</b> ({timestamp})\n"
        elif entry['type'] == 'teams':
            response += f"{idx}. üë• –ö–æ–º–∞–Ω–¥—ã ({timestamp})\n"
        elif entry['type'] == 'password':
            response += f"{idx}. üîë –ü–∞—Ä–æ–ª—å ({timestamp})\n"
        elif entry['type'] == 'date':
            response += f"{idx}. üìÖ –î–∞—Ç–∞: {entry['input']} ‚Üí <b>{entry['result']}</b> ({timestamp})\n"
        elif entry['type'] == 'weighted':
            response += f"{idx}. ‚öñÔ∏è –í–∑–≤–µ—à–µ–Ω–Ω—ã–π: {entry['input']} ‚Üí <b>{entry['result']}</b> ({timestamp})\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history"))
    
    await bot.send_message(
        callback_query.from_user.id,
        response,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'clear_history')
async def clear_history_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    if user_id in user_history:
        user_history[user_id] = []
        save_user_data(user_id)
    
    await bot.answer_callback_query(callback_query.id, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
    await bot.send_message(callback_query.from_user.id, "üßπ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞.")

@dp.callback_query_handler(lambda c: c.data == 'help_info')
async def help_handler(callback_query: types.CallbackQuery):
    help_text = (
        "üÜò –ü–æ–º–æ—â—å –ø–æ RandomMaster Bot\n\n"
        "üé≤ <b>–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1 100</code>)\n\n"
        "üìã <b>–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>–Ø–±–ª–æ–∫–æ, –ì—Ä—É—à–∞, –ë–∞–Ω–∞–Ω</code>)\n\n"
        "üë• <b>–í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã</b>\n"
        "1. –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è\n\n"
        "üîê <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—è</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–æ—Ç 6 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
        "üîÑ <b>–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Å–ø–∏—Å–æ–∫</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n"
        "üìÖ <b>–°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>2023-01-01 2023-12-31</code>)\n\n"
        "‚öñÔ∏è <b>–í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –∏—Ö –≤–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>–ö—Ä–∞—Å–Ω—ã–π:3, –ó–µ–ª–µ–Ω—ã–π:2, –°–∏–Ω–∏–π:1</code>)\n\n"
        "üìú <b>–ò—Å—Ç–æ—Ä–∏—è</b>\n"
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "–ú–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n\n"
        "–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –∏ –Ω–∏–≥–¥–µ –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è."
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        help_text,
        parse_mode="HTML"
    )

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    os.makedirs('user_data', exist_ok=True)
    
    executor.start_polling(dp, skip_updates=True)
